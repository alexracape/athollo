{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Stat/Stat.js","Components/StatList/StatList.js","Components/DashboardGauge/DashboardGauge.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","selectTrack","onSelect","track","TrackList","tracks","map","id","SearchResults","searchResults","Stat","statName","statValue","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","console","log","fetch","headers","Authorization","then","response","json","jsonResponse","items","name","artist","artists","album","uri","getAudioFeatures","type","danceability","energy","loudness","speechiness","acousticness","instrumentalness","liveness","tempo","DashboardGauge","initialStat","handleChange","currentValue","Math","round","stats","size","gaugeSpecs","tickLength","tickWidth","dialColor","tickColor","progressColor","needleColor","needleBaseColor","App","currentSong","songStats","audioFeatures","largeGaugeSpecs","smallGaugeSpecs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66c27768.chunk.js","sourcesContent":["const clientId = '1f54c2244d494eb794495c1a79f0f5eb';\nconst redirectUri = 'https://alexracape.github.io/athollo/';\nlet accessToken;\n\nconst Spotify = {\n    \n    getAccessToken() {\n        if (accessToken){\n            return accessToken;\n        }   \n\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\n\n        \n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}&show_dialog=true`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        console.log(accessToken);\n\n        return fetch(\n            `https://api.spotify.com/v1/search?type=track&q=${term}`,\n            {\n                headers: {Authorization: `Bearer ${accessToken}`}\n            }\n        ).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            console.log(jsonResponse)\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }))\n\n        })\n    },\n\n    getAudioFeatures(track) {\n        const accessToken = Spotify.getAccessToken();\n        console.log(accessToken);\n\n        return fetch(\n            `https://api.spotify.com/v1/audio-features/${track.id}`,\n            {\n                headers: {Authorization: `Bearer ${accessToken}`}\n            }\n        ).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            console.log(jsonResponse)\n            if(!jsonResponse.type === \"audio_features\"){\n                return {}\n            }\n            \n            return {\n                danceability: jsonResponse.danceability,\n                energy: jsonResponse.energy,\n                loudness: jsonResponse.loudness,\n                speechiness: jsonResponse.speechiness,\n                acousticness: jsonResponse.acousticness,\n                instrumentalness: jsonResponse.instrumentalness,\n                liveness: jsonResponse.liveness,\n                tempo: jsonResponse.tempo\n            }\n        })\n    }\n\n}\n\nexport default Spotify;","import React from 'react'\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: ''\n        }\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song Name\" onChange={this.handleTermChange}/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\n\nclass Track extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.selectTrack = this.selectTrack.bind(this);\n    }\n\n    selectTrack() {\n        this.props.onSelect(this.props.track)\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track[\"name\"]}</h3>\n                    <p>{this.props.track[\"artist\"]} | {this.props.track[\"album\"]}</p>\n                </div>\n                <button className=\"Track-action\" onClick={this.selectTrack}>+</button>\n            </div>\n        )\n    }\n}\n\nexport default Track;","import React from 'react';\nimport Track from '../Track/Track'\n\nclass TrackList extends React.Component {\n\n    render(){\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => {\n                    return <Track key={track.id} track={track} onSelect={this.props.onSelect}/>\n                })}\n            </div>\n        )\n    }\n}\n\nexport default TrackList","import React from 'react';\nimport TrackList from '../TrackList/TrackList'\nimport './SearchResults.css'\n\nclass SearchResults extends React.Component {\n\n\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onSelect={this.props.onSelect}/>\n            </div>\n        )\n    }\n\n}\n\nexport default SearchResults;","import { div } from 'prelude-ls';\nimport React from 'react';\n\nclass Stat extends React.Component {\n    \n    \n    render() {\n        return (\n            <div className=\"Stat\">\n                <h2>{this.props.statName} = {this.props.statValue}</h2>\n            </div>\n        )\n    }\n}\n\nexport default Stat;","import React from 'react';\nimport Stat from '../Stat/Stat'\nimport Gauge from 'react-radial-gauge';\nimport './StatList.css'\n\n\nclass StatList extends React.Component {\n\n    render(){\n        const confidenceStats = ['danceability', 'energy', 'speechiness', 'acousticness', 'instrumentalness', 'liveness'];\n        return (\n            <div className=\"stat-list\">\n                {\n                    Object.keys(this.props.stats).map(stat => {  \n                        let value = this.props.stats[stat];\n                        \n                        if (confidenceStats.includes(stat)) {\n                            value *= 100;\n                        }\n\n                        return (\n                            <div>\n                                <Gauge currentValue={Math.round(value)}/>\n                                <Stat statName={stat} statValue={this.props.stats[stat]}/>\n                            </div>\n                        )                        \n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default StatList","import React from 'react';\nimport Gauge from 'react-radial-gauge';\nimport './DashboardGauge.css'\n\nclass DashboardGauge extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.props.initialStat\n        };\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value})\n    }\n\n    render() {\n        return (\n            <div className=\"gauge-container\">\n                <Gauge \n                    currentValue={Math.round(this.props.stats[this.state.value] * 100)}\n                    size={this.props.gaugeSpecs['size']} \n                    tickLength={this.props.gaugeSpecs['tickLength']} \n                    tickWidth={this.props.gaugeSpecs['tickWidth']} \n                    dialColor={this.props.gaugeSpecs['dialColor']} \n                    tickColor={this.props.gaugeSpecs['tickColor']} \n                    progressColor={this.props.gaugeSpecs['progressColor']} \n                    needleColor={this.props.gaugeSpecs['needleColor']} \n                    needleBaseColor={this.props.gaugeSpecs['needleBaseColor']}\n                />\n                \n                <form>\n                    <select className=\"select-menu\" value={this.state.value} onChange={this.handleChange}>\n                        <option value=\"acousticness\">Acousticness</option>\n                        <option value=\"danceability\">Danceability</option>\n                        <option value=\"energy\">Energy</option>\n                        <option value=\"instrumentalness\">instrumentalness</option>\n                        <option value=\"liveness\">Liveness</option>\n                        <option value=\"speechiness\">Speechiness</option>\n                    </select>\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default DashboardGauge;","import React from 'react'\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport StatList from '../StatList/StatList'\nimport Spotify from '../../util/Spotify'\nimport Gauge from 'react-radial-gauge';\nimport DashboardGauge from '../DashboardGauge/DashboardGauge'\n\nimport './App.css';\n \n\n/*\nTODO\n- Needle Animation: how to animate between two states / on state change\n- Dynamic CSS to allow for changing window size / mobile\n- Figure out more appealing look for center search console\n- Place to indicat currently selected song\n- Athollo logo\n- Figure out consistent font\n- Stats for song you are currently listening to\n- What does each stat mean on hover\n\n*/\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = { \n      searchResults: [],\n      currentSong: {},\n      songStats: {\n        acousticness: 0,\n        danceability: 0,\n        energy: 0,\n        instrumentalness: 0,\n        liveness: 0,\n        speechiness: 0\n      }\n    }\n\n    this.selectTrack = this.selectTrack.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  selectTrack(track) {\n    if (this.state.currentSong === track) {\n      return;\n    }\n    this.setState({currentSong: track});\n    Spotify.getAudioFeatures(track).then(audioFeatures => {\n      this.setState({songStats: audioFeatures})\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render() {\n    \n    const largeGaugeSpecs = {\n      size: 400,\n      tickLength: 10,\n      tickWidth: 2,\n      dialColor: '#3766fc',\n      tickColor: '#3766fc',\n      progressColor: '#1533c5',\n      needleColor: '#fb2d1e',\n      needleBaseColor: '#04040b'\n    }\n\n    const smallGaugeSpecs = {\n      size: 200,\n      tickLength: 10,\n      tickWidth: 2,\n      dialColor: '#3766fc',\n      tickColor: '#3766fc',\n      progressColor: '#1533c5',\n      needleColor: '#fb2d1e',\n      needleBaseColor: '#04040b'\n    }\n    \n    return (\n    <div className=\"App\">\n      <h1>Athollo</h1>\n      <div className=\"main-container\">\n        <DashboardGauge initialStat='energy' stats={this.state.songStats} gaugeSpecs={largeGaugeSpecs}/>\n        <div className=\"center-flex-container\">\n          <SearchBar className=\"center-flex-child\" onSearch={this.search}/>\n          <SearchResults className=\"center-flex-child\" searchResults={this.state.searchResults} onSelect={this.selectTrack}/>\n           <div className=\"small-gauge-container center\">\n            <DashboardGauge initialStat='danceability' stats={this.state.songStats} gaugeSpecs={smallGaugeSpecs}/>\n            <DashboardGauge initialStat='acousticness' stats={this.state.songStats} gaugeSpecs={smallGaugeSpecs}/>\n          </div> \n        </div>\n        <DashboardGauge initialStat='speechiness' stats={this.state.songStats} gaugeSpecs={largeGaugeSpecs}/>\n      </div>\n      <h2>Current Song is {this.state.currentSong.name}</h2>\n    </div>\n  )\n    \n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}